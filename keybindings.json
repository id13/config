[
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+w c",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-notebook.cell.insertCodeCellAbove",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "jupyter.runByLineStop",
        "when": "jupyter.notebookeditor.runByLineInProgress && notebookKernelCount > 0"
    },
    {
        "key": "ctrl+enter",
        "command": "-jupyter.runByLineStop",
        "when": "jupyter.notebookeditor.runByLineInProgress && notebookKernelCount > 0"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "jupyter.runcurrentcell",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-jupyter.runcurrentcell",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "notebook.cell.executeAndFocusContainer",
        "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-notebook.cell.executeAndFocusContainer",
        "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+oem_period",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+enter",
        "command": "problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+oem_period",
        "command": "-problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "enter",
        "command": "-problems.action.open",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+alt+t",
        "command": "copy-file-name.copyFileName",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+f",
        "command": "-copy-file-name.copyFileName",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+d",
        "command": "copy-file-name.copyFileNameWithExtension",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+e",
        "command": "-copy-file-name.copyFileNameWithExtension",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+p",
        "command": "-extension.vim_ctrl+p",
        "when": "editorTextFocus && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
    },
    {
        "key": "ctrl+oem_3",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+w h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl+w k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl+w l",
        "command": "workbench.action.navigateRight"
    },{
        "key": "ctrl+w j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "ctrl+w s",
        "command": "workbench.action.splitEditorDown"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorDown"
    },
    {
        "key": "ctrl+w v",
        "command": "workbench.action.splitEditorRight"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorRight"
    },
    {
        "key": "ctrl+w z",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    {
        "key": "ctrl+w b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+w =",
        "command": "workbench.action.minimizeOtherEditors"
    },
    {
        "key": "ctrl+w -",
        "command": "workbench.action.evenEditorWidths"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-find-it-faster.findFiles"
    },
    {
        "key": "ctrl+f",
        "command": "find-it-faster.findWithinFiles",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-find-it-faster.findWithinFiles"
    },
    {
        "key": "ctrl+w e",
        "command": "workbench.view.explorer",
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "ctrl+shift+e",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+alt+b",
        "command": "-workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+w q",
        "command": "workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+w oem_4",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+right",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+k ctrl+pagedown",
        "command": "-workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+left",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+k ctrl+pageup",
        "command": "-workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+f",
        "command": "-actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+k",
        "command": "deleteAllRight",
        "when": "terminalFocus"
    },
    {
        "key": "alt+b",
        "command": "-gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "ctrl+w m",
        "command": "workbench.action.toggleMaximizeEditorGroup",
        "when": "maximizedEditorGroup || multipleEditorGroups"
    },
    {
        "key": "ctrl+k ctrl+m",
        "command": "-workbench.action.toggleMaximizeEditorGroup",
        "when": "maximizedEditorGroup || multipleEditorGroups"
    },
    {
        "key": "ctrl+shift+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalTextSelectedInFocused || terminalFocus"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.copySelection",
        "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.switchWindow"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeWindow",
        "when": "!editorIsOpen && !multipleEditorGroups"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closePanel",
        "when": "panelFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeSidebar",
        "when": "sideBarFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeAuxiliaryBar",
        "when": "auxiliaryBarFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closePanel",
        "when": "panelFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-cursor.closeChat",
        "when": "chatInputFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-cursor.closeChat",
        "when": "inChat"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor",
        "when": "inChat"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closePanel"
    },
    {
        "key": "ctrl+w",
        "command": "-cursor.closeChat"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeGroup"
    },
    {
        "key": "ctrl+w",
        "command": "-extension.vim_ctrl+w",
        "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "cmd+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "cmd+p",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+d",
        "command": "-deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "composer.cancelComposerStep",
        "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "-composer.cancelComposerStep",
        "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "cmd+backspace",
        "command": "editor.action.inlineDiffs.rejectAll",
        "when": "editorTextFocus && @inlineDiffs.rejectAllEdits.isActiveEditorWithDiffs"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "-editor.action.inlineDiffs.rejectAll",
        "when": "editorTextFocus && @inlineDiffs.rejectAllEdits.isActiveEditorWithDiffs"
    },
    {
        "key": "cmd+backspace",
        "command": "editor.action.inlineDiffs.cancelPromptBar",
        "when": "editorTextFocus && hasActivelyGeneratingPromptBarDiff"
    },
    {
        "key": "cmd+backspace",
        "command": "-editor.action.inlineDiffs.cancelPromptBar",
        "when": "editorTextFocus && hasActivelyGeneratingPromptBarDiff"
    },
    {
        "key": "cmd+backspace",
        "command": "editor.action.inlineDiffs.cancelEdits",
        "when": "editorTextFocus && hasActivelyGeneratingDiff"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "-editor.action.inlineDiffs.cancelEdits",
        "when": "editorTextFocus && hasActivelyGeneratingDiff"
    },
    {
        "key": "cmd+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
      "key": "ctrl+w t",
      "command": "workbench.action.createTerminalEditor"
    },
    {
      "key": "cmd+[",
      "command": "-editor.action.outdentLines",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "cmd+[",
      "command": "-composer.previousChatTab",
      "when": "composerFocused && !editorTextFocus"
    },
    {
      "key": "cmd+]",
      "command": "-editor.action.indentLines",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "cmd+]",
      "command": "-composer.nextChatTab",
      "when": "composerFocused && !editorTextFocus"
    },
    {
      "key": "ctrl+[",
      "command": "extension.vim_ctrl+o",
      "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"
    },
    {
      "key": "ctrl+o",
      "command": "-extension.vim_ctrl+o",
      "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"
    },
    {
      "key": "ctrl+[",
      "command": "-extension.vim_ctrl+[",
      "when": "editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl"
    },
    {
      "key": "cmd+b",
      "command": "composerMode.plan"
    },
    {
      "key": "cmd+i",
      "command": "composerMode.agent"
    },
    {
      "key": "shift+alt+right",
      "command": "-cursorWordEndRightSelect",
      "when": "textInputFocus"
    },
    {
      "key": "shift+alt+left",
      "command": "-cursorWordLeftSelect",
      "when": "textInputFocus"
    },
    {
      "key": "shift+alt+up",
      "command": "-editor.action.copyLinesUpAction",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "shift+alt+up",
      "command": "-notebook.cell.copyUp",
      "when": "notebookEditorFocused && !inputFocus"
    },
    {
      "key": "shift+alt+down",
      "command": "-editor.action.copyLinesDownAction",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "shift+alt+down",
      "command": "-notebook.cell.copyDown",
      "when": "notebookEditorFocused && !inputFocus"
    },
    {
      "key": "ctrl+right",
      "command": "-extension.vim_ctrl+right",
      "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
      "key": "ctrl+right",
      "command": "-quickInput.acceptInBackground",
      "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
      "key": "ctrl+left",
      "command": "-extension.vim_ctrl+left",
      "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    }
]